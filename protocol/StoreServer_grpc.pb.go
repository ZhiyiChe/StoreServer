// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicerClient is the client API for Servicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicerClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// RegisterUser 注册
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserReply, error)
	// LoginUser 登录
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error)
	// QueryAllFiles 查找所有文件 这个接口proto在C++端有奇怪的bug
	QueryAllFiles(ctx context.Context, in *QueryAllFilesRequest, opts ...grpc.CallOption) (*QueryAllFilesReply, error)
	// UploadFile 上传文件
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Servicer_UploadFileClient, error)
	// QueryFileIsEncrypted 查询文件是否加密
	QueryFileIsEncrypted(ctx context.Context, in *QueryFileIsEncryptedRequest, opts ...grpc.CallOption) (*QueryFileIsEncryptedReply, error)
	// VerifyFilePassword 校验文件密码
	VerifyFilePassword(ctx context.Context, in *VerifyFilePasswordRequest, opts ...grpc.CallOption) (*VerifyFilePasswordReply, error)
	// DownloadFile 下载文件
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (Servicer_DownloadFileClient, error)
	// DeleteFile 删除文件
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileReply, error)
	// QueryFileMd 查询文件md5
	QueryFileMd(ctx context.Context, in *QueryFileMdRequest, opts ...grpc.CallOption) (*QueryFileMdReply, error)
}

type servicerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicerClient(cc grpc.ClientConnInterface) ServicerClient {
	return &servicerClient{cc}
}

func (c *servicerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/SayHelloAgain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserReply, error) {
	out := new(RegisterUserReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserReply, error) {
	out := new(LoginUserReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) QueryAllFiles(ctx context.Context, in *QueryAllFilesRequest, opts ...grpc.CallOption) (*QueryAllFilesReply, error) {
	out := new(QueryAllFilesReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/QueryAllFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Servicer_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Servicer_ServiceDesc.Streams[0], "/protocol.Servicer/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicerUploadFileClient{stream}
	return x, nil
}

type Servicer_UploadFileClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadFileReply, error)
	grpc.ClientStream
}

type servicerUploadFileClient struct {
	grpc.ClientStream
}

func (x *servicerUploadFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicerUploadFileClient) CloseAndRecv() (*UploadFileReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicerClient) QueryFileIsEncrypted(ctx context.Context, in *QueryFileIsEncryptedRequest, opts ...grpc.CallOption) (*QueryFileIsEncryptedReply, error) {
	out := new(QueryFileIsEncryptedReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/QueryFileIsEncrypted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) VerifyFilePassword(ctx context.Context, in *VerifyFilePasswordRequest, opts ...grpc.CallOption) (*VerifyFilePasswordReply, error) {
	out := new(VerifyFilePasswordReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/VerifyFilePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (Servicer_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Servicer_ServiceDesc.Streams[1], "/protocol.Servicer/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Servicer_DownloadFileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type servicerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *servicerDownloadFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileReply, error) {
	out := new(DeleteFileReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicerClient) QueryFileMd(ctx context.Context, in *QueryFileMdRequest, opts ...grpc.CallOption) (*QueryFileMdReply, error) {
	out := new(QueryFileMdReply)
	err := c.cc.Invoke(ctx, "/protocol.Servicer/QueryFileMd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicerServer is the server API for Servicer service.
// All implementations must embed UnimplementedServicerServer
// for forward compatibility
type ServicerServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error)
	// RegisterUser 注册
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserReply, error)
	// LoginUser 登录
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserReply, error)
	// QueryAllFiles 查找所有文件 这个接口proto在C++端有奇怪的bug
	QueryAllFiles(context.Context, *QueryAllFilesRequest) (*QueryAllFilesReply, error)
	// UploadFile 上传文件
	UploadFile(Servicer_UploadFileServer) error
	// QueryFileIsEncrypted 查询文件是否加密
	QueryFileIsEncrypted(context.Context, *QueryFileIsEncryptedRequest) (*QueryFileIsEncryptedReply, error)
	// VerifyFilePassword 校验文件密码
	VerifyFilePassword(context.Context, *VerifyFilePasswordRequest) (*VerifyFilePasswordReply, error)
	// DownloadFile 下载文件
	DownloadFile(*DownloadFileRequest, Servicer_DownloadFileServer) error
	// DeleteFile 删除文件
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error)
	// QueryFileMd 查询文件md5
	QueryFileMd(context.Context, *QueryFileMdRequest) (*QueryFileMdReply, error)
	mustEmbedUnimplementedServicerServer()
}

// UnimplementedServicerServer must be embedded to have forward compatible implementations.
type UnimplementedServicerServer struct {
}

func (UnimplementedServicerServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedServicerServer) SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloAgain not implemented")
}
func (UnimplementedServicerServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedServicerServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedServicerServer) QueryAllFiles(context.Context, *QueryAllFilesRequest) (*QueryAllFilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllFiles not implemented")
}
func (UnimplementedServicerServer) UploadFile(Servicer_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedServicerServer) QueryFileIsEncrypted(context.Context, *QueryFileIsEncryptedRequest) (*QueryFileIsEncryptedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFileIsEncrypted not implemented")
}
func (UnimplementedServicerServer) VerifyFilePassword(context.Context, *VerifyFilePasswordRequest) (*VerifyFilePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyFilePassword not implemented")
}
func (UnimplementedServicerServer) DownloadFile(*DownloadFileRequest, Servicer_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedServicerServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedServicerServer) QueryFileMd(context.Context, *QueryFileMdRequest) (*QueryFileMdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFileMd not implemented")
}
func (UnimplementedServicerServer) mustEmbedUnimplementedServicerServer() {}

// UnsafeServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicerServer will
// result in compilation errors.
type UnsafeServicerServer interface {
	mustEmbedUnimplementedServicerServer()
}

func RegisterServicerServer(s grpc.ServiceRegistrar, srv ServicerServer) {
	s.RegisterService(&Servicer_ServiceDesc, srv)
}

func _Servicer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_SayHelloAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).SayHelloAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/SayHelloAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).SayHelloAgain(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_QueryAllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).QueryAllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/QueryAllFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).QueryAllFiles(ctx, req.(*QueryAllFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicerServer).UploadFile(&servicerUploadFileServer{stream})
}

type Servicer_UploadFileServer interface {
	SendAndClose(*UploadFileReply) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type servicerUploadFileServer struct {
	grpc.ServerStream
}

func (x *servicerUploadFileServer) SendAndClose(m *UploadFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicerUploadFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Servicer_QueryFileIsEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileIsEncryptedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).QueryFileIsEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/QueryFileIsEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).QueryFileIsEncrypted(ctx, req.(*QueryFileIsEncryptedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_VerifyFilePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyFilePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).VerifyFilePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/VerifyFilePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).VerifyFilePassword(ctx, req.(*VerifyFilePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicerServer).DownloadFile(m, &servicerDownloadFileServer{stream})
}

type Servicer_DownloadFileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type servicerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *servicerDownloadFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Servicer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicer_QueryFileMd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileMdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicerServer).QueryFileMd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Servicer/QueryFileMd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicerServer).QueryFileMd(ctx, req.(*QueryFileMdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Servicer_ServiceDesc is the grpc.ServiceDesc for Servicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Servicer",
	HandlerType: (*ServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Servicer_SayHello_Handler,
		},
		{
			MethodName: "SayHelloAgain",
			Handler:    _Servicer_SayHelloAgain_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Servicer_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Servicer_LoginUser_Handler,
		},
		{
			MethodName: "QueryAllFiles",
			Handler:    _Servicer_QueryAllFiles_Handler,
		},
		{
			MethodName: "QueryFileIsEncrypted",
			Handler:    _Servicer_QueryFileIsEncrypted_Handler,
		},
		{
			MethodName: "VerifyFilePassword",
			Handler:    _Servicer_VerifyFilePassword_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Servicer_DeleteFile_Handler,
		},
		{
			MethodName: "QueryFileMd",
			Handler:    _Servicer_QueryFileMd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Servicer_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _Servicer_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "StoreServer.proto",
}
